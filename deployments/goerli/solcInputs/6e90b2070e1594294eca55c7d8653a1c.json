{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__MinimumAmount();\nerror FundMe__TransactionFailure();\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 private constant MIN_USD = 10 * 1e18;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address private immutable i_owner;\n    AggregatorV3Interface internal priceFeed;\n\n    modifier OnlyOwner() {\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n        i_owner = msg.sender;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        if (msg.value.convertToUsd(priceFeed) < MIN_USD)\n            revert FundMe__MinimumAmount();\n        if (s_addressToAmountFunded[msg.sender] == 0) {\n            s_funders.push(msg.sender);\n        }\n        s_addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public OnlyOwner {\n        for (uint256 index = 0; index < s_funders.length; index++) {\n            s_addressToAmountFunded[s_funders[index]] = 0;\n        }\n        s_funders = new address[](0);\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\n            \"\"\n        );\n        if (!sent) revert FundMe__TransactionFailure();\n    }\n\n    function getMinUsd() public pure returns (uint256) {\n        return MIN_USD;\n    }\n\n    function getFunders(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address _address)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[_address];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function convertToUsd(uint256 ethAmount, AggregatorV3Interface _priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        AggregatorV3Interface priceFeed = _priceFeed;\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        uint256 usdPricePerEth = uint256(price * 1e10);\n        uint256 amountInUsd = (usdPricePerEth * ethAmount) / 1e18;\n        return (amountInUsd);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}